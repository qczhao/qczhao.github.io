---
layout: post
title:  ".net异步编程的问题"
date:   2018-05-19 11:24:30 -0400
categories: 工作琐事
---

 - 上周到这周，用新版的HttpClient库封装了调用Java管理Gerrit的函数，也通过了功能测试。但是这周，将它包装成一个Web api controller之后，前端调用却是无限的循环。追究根本，就是

 - > 参考一下这几个文章
   > * [stackoverflow问题1](https://stackoverflow.com/questions/10343632/httpclient-getasync-never-returns-when-using-await-async)
   > * [stackoverflow问题2](https://stackoverflow.com/search?tab=votes&q=webapi%20httpclient)
   > * [stackoverflow答者的Blog详细阐述](http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html)

 - 按照文章的说法，我进行功能测试的环境是Web Application，而转换为Web Api Controller之后。调用异步Api的进程不同，上下文不同，从而产生了死锁的问题。
 - 看了老外很多年前的blog，受到了误导，事情并非他文章说那样。这个问题与我最初的判断差不多，主要还是WebApi的Host的方式决定的。传统的Asp.net WebForm应用直接Host在IIS应用程序池上，每个用户的连接，通过消息队列模拟，视为一个单一进程。这种方式下，Taks.wait()方法阻塞主进程，等待线程完成任务。由于此时的主进程就是IIS进程池托管的用户进程，所以这个动作就跟等待一个同步函数完成一样，不会发生任何的问题。

 - 对于Asp.net WebApi则不同，参考官方的文档：[ASP.NET WEB API2:HTTP Message Lifecyle](https://www.asp.net/media/4071077/aspnet-web-api-poster.pdf) 整个Asp.net WebApi的生命周期开始时，就需要选择Host的方式，使用IIS Hosting或者Self OWIN（Open Web Server Interface for .NET）Hosting。
 - 这里先不看那个OWIN，只考虑IIS Hosting的方式。官方的文档真是很详细也很复杂，与我这个问题相关的在Invoke Controller Action。通过实现IHttpActionInvoker接口的方法，实现异步的Http调用，其返回的是一个Task<HttpResponseMessage>。
 - 在同步方法中，调用用户自定义的Task.wait()，由于同步方法执行依赖于上下文，Task.wait()提示同步方法等待上下文准备完毕，此时同步方法阻塞等待Task的上线文，当上下文准备好之后，同步方法自动就可以执行下去。所以在同步的程序中，必须阻塞主进程的上下文，若异步方法阻塞的不是主进程，就会发生运行时的异常。
 - 对于异步的方法，很显然的，它返回的是Task<T>，是要执行的那一段方法的引用。那么异步的操作是否是不依赖于上下文的呢？在一个异步方法中Task.wait()，我认为会将这个方法锁死，因为它不知道何时继续执行下去。
 - 对于异步编程，还是需要继续学习和研究吧。

